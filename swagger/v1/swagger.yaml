---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/users/{id}/tasks/{id}/comments":
    post:
      summary: Creates a comment
      tags:
      - Comments
      security:
      - Bearer: {}
      parameters:
      - name: title
        in: query
        schema:
          type: string
      - name: task_id
        in: query
        schema:
          type: integer
      - name: user_id
        in: query
        schema:
          type: integer
      responses:
        '201':
          description: comment created
        '422':
          description: invalid request
    get:
      summary: Retrieves all comments
      tags:
      - Comments
      security:
      - Bearer: {}
      responses:
        '200':
          description: comments found
  "/users/{id}/tasks/{id}/comments/{id}":
    get:
      summary: Retrieves a comment by ID
      tags:
      - Comments
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: comment found
        '404':
          description: comment not found
    put:
      summary: Updates a comment
      tags:
      - Comments
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      - name: title
        in: query
        schema:
          type: string
      - name: task_id
        in: query
        schema:
          type: integer
      responses:
        '200':
          description: comment updated
        '404':
          description: comment not found
    delete:
      summary: Deletes a comment
      tags:
      - Comments
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: comment deleted
        '404':
          description: comment not found
  "/users/{id}/tasks":
    get:
      summary: List all tasks
      tags:
      - Tasks
      security:
      - Bearer: {}
      responses:
        '200':
          description: tasks listed
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    title:
                      type: string
                    description:
                      type: string
                    due_date:
                      type: string
                      format: date
                    priorities:
                      type: string
                    status:
                      type: string
                    image:
                      type: string
                  required:
                  - id
                  - title
                  - description
                  - due_date
                  - priorities
                  - status
                  - image
    post:
      summary: Create a task
      tags:
      - Tasks
      security:
      - Bearer: {}
      parameters: []
      responses:
        '201':
          description: task created
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                due_date:
                  type: string
                  format: date
                priorities:
                  type: string
                status:
                  type: string
                image:
                  type: string
              required:
              - title
              - description
              - due_date
              - priorities
              - status
              - image
  "/users/{id}/tasks/{id}":
    get:
      summary: Retrieve a task by ID
      tags:
      - Tasks
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: task found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  title:
                    type: string
                  description:
                    type: string
                  due_date:
                    type: string
                    format: date
                  priorities:
                    type: string
                  status:
                    type: string
                  image:
                    type: string
                required:
                - id
                - title
                - description
                - due_date
                - priorities
                - status
                - image
        '404':
          description: task not found
    patch:
      summary: Update a task by ID
      tags:
      - Tasks
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: task updated
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                due_date:
                  type: string
                  format: date
                priorities:
                  type: string
                status:
                  type: string
                image:
                  type: string
    delete:
      summary: Delete a task by ID
      tags:
      - Tasks
      security:
      - Bearer: {}
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: task deleted
        '404':
          description: task not found
  "/task/assign":
    post:
      summary: Assign a task to a user
      tags:
      - Tasks
      security:
      - Bearer: {}
      parameters:
      - name: task_id
        in: query
        schema:
          type: integer
      - name: user_id
        in: query
        schema:
          type: integer
      responses:
        '200':
          description: task assigned
  "/users":
    get:
      summary: List all users
      tags:
      - Users
      parameters:
      - name: page
        in: query
        schema:
          type: integer
      responses:
        '200':
          description: users listed
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        email:
                          type: string
                        user_type:
                          type: string
                  meta:
                    type: object
                    properties:
                      current_page:
                        type: integer
                      total_page:
                        type: integer
    post:
      summary: Create a user
      tags:
      - Users
      parameters: []
      responses:
        '201':
          description: user created
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password_digest:
                  type: string
                user_type:
                  type: string
              required:
              - name
              - email
              - password_digest
              - user_type
  "/users/{id}":
    get:
      summary: Retrieve a user by ID
      tags:
      - Users
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: user found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  email:
                    type: string
                  user_type:
                    type: string
                required:
                - id
                - name
                - email
                - user_type
        '404':
          description: user not found
  "/users/update":
    patch:
      summary: Update the current user
      tags:
      - Users
      parameters: []
      responses:
        '200':
          description: user updated
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password_digest:
                  type: string
                user_type:
                  type: string
  "/users/show":
    get:
      summary: Retrieve the current user
      tags:
      - Users
      responses:
        '200':
          description: user found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  email:
                    type: string
                  user_type:
                    type: string
                required:
                - id
                - name
                - email
                - user_type
components:
  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header
      description: Your Bearer token
